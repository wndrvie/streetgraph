<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="4520dd39-e0db-469e-a8b7-295ad3446b37" name="Default" comment="" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="375">
      <file leaf-file-name="core.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/streetgraph/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="0">
              <caret line="108" column="54" lean-forward="false" selection-start-line="108" selection-start-column="54" selection-end-line="108" selection-end-column="54" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="README.md" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/README.md">
          <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
            <state split_layout="SPLIT">
              <first_editor relative-caret-position="21">
                <caret line="1" column="45" lean-forward="false" selection-start-line="1" selection-start-column="45" selection-end-line="1" selection-end-column="45" />
                <folding />
              </first_editor>
              <second_editor>
                <js_state />
              </second_editor>
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name=".gitignore" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/.gitignore">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="252">
              <caret line="12" column="0" lean-forward="false" selection-start-line="12" selection-start-column="0" selection-end-line="12" selection-end-column="0" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="project.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="189">
              <caret line="9" column="47" lean-forward="false" selection-start-line="9" selection-start-column="47" selection-end-line="9" selection-end-column="47" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>freq-map</find>
      <find>w</find>
    </findStrings>
    <replaceStrings>
      <replace>nodes-adj</replace>
      <replace>way</replace>
    </replaceStrings>
  </component>
  <component name="Git.Settings">
    <option name="PREVIOUS_COMMIT_AUTHORS">
      <list>
        <option value="Anna" />
      </list>
    </option>
    <option name="ROOT_SYNC" value="DONT_SYNC" />
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/streetgraph" />
  </component>
  <component name="GradleLocalSettings">
    <option name="externalProjectsViewState">
      <projects_view />
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/README.md" />
        <option value="$PROJECT_DIR$/src/streetgraph/core.clj" />
        <option value="$PROJECT_DIR$/.gitignore" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="-8" />
    <option name="width" value="976" />
    <option name="height" value="1038" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
      <flattenPackages />
      <showMembers />
      <showModules />
      <showLibraryContents />
      <hideEmptyPackages />
      <abbreviatePackageNames />
      <autoscrollToSource />
      <autoscrollFromSource />
      <sortByType />
      <manualOrder />
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scratches" />
      <pane id="Scope" />
      <pane id="AndroidView" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="streetgraph" type="b2602c69:ProjectViewProjectNode" />
              <item name="streetgraph" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="streetgraph" type="b2602c69:ProjectViewProjectNode" />
              <item name="streetgraph" type="462c0819:PsiDirectoryNode" />
              <item name=".idea" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="streetgraph" type="b2602c69:ProjectViewProjectNode" />
              <item name="streetgraph" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="streetgraph" type="b2602c69:ProjectViewProjectNode" />
              <item name="streetgraph" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="streetgraph" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="streetgraph" type="b2602c69:ProjectViewProjectNode" />
              <item name="streetgraph" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="streetgraph" type="b2602c69:ProjectViewProjectNode" />
              <item name="streetgraph" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
              <item name="streetgraph" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="last_opened_file_path" value="C:/Program Files/Git/bin/git.exe" />
    <property name="settings.editor.selected.configurable" value="reference.settings.project.maven.repository.indices" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
  </component>
  <component name="ReplState" timestamp="1521148886885">{:repl-history {:ide [], :local [{:command &quot;(require '[clojure.data.csv :as csv])&quot;, :offset 37, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn test-way-tags (zip-xml/xml-&gt; (nth testways 1) :tag))&quot;, :offset 58, :ns &quot;streetgraph.core&quot;} {:command &quot;(nth testways 1)&quot;, :offset 16, :ns &quot;streetgraph.core&quot;} {:command &quot;(def roads (get-roads ways))&quot;, :offset 28, :ns &quot;streetgraph.core&quot;} {:command &quot;(take 3 roads)&quot;, :offset 14, :ns &quot;streetgraph.core&quot;} {:command &quot;(for [i (range (count testroads))]\n  (for [nd (nth i testroads)]\n    (let [gotcha (find @freq-map nd)]\n      (if (nil? gotcha)\n        (swap! freq-map assoc nd 1)\n        (swap! freq-map assoc nd (inc gotcha))))))&quot;, :offset 213, :ns &quot;streetgraph.core&quot;} {:command &quot;(for [i (range (count testroads))]\n  (for [nd (nth testroads i)]\n    (let [gotcha (find @freq-map nd)]\n      (if (nil? gotcha)\n        (swap! freq-map assoc nd 1)\n        (swap! freq-map assoc nd (inc gotcha))))))&quot;, :offset 213, :ns &quot;streetgraph.core&quot;} {:command &quot;(for [i (range (count testroads))]\n  (for [nd (nth testroads i)]\n    (let [gotcha (find @freq-map nd)]\n      (if (nil? gotcha)\n        (println (swap! freq-map assoc nd 1))\n        (swap! freq-map assoc nd (inc gotcha))))))&quot;, :offset 223, :ns &quot;streetgraph.core&quot;} {:command &quot;; !!!\n; (for [i (range (count roads))]\n;  (for [nd (nth roads i)]\n;    (let [gotcha (find @freq-map nd)]\n;      (if (nil? gotcha)\n;        (swap! freq-map assoc nd 1)\n;        (swap! freq-map assoc nd (inc gotcha))))))&quot;, :offset 218, :ns &quot;streetgraph.core&quot;} {:command &quot; (for [i (range (count testroads))]\n  (for [nd (nth testroads i)]\n    (let [gotcha (find @freq-map nd)]\n      (if (nil? gotcha)\n        (swap! freq-map assoc nd 1)\n        (swap! freq-map assoc nd (inc gotcha))))))&quot;, :offset 214, :ns &quot;streetgraph.core&quot;} {:command &quot; (for [i (range (count testroads))]\n  (for [nd (nth testroads i)]\n    (let [gotcha (find @freq-map nd)]\n      (if (nil? gotcha)\n        (swap! freq-map assoc nd 1)\n        ))))&quot;, :offset 176, :ns &quot;streetgraph.core&quot;} {:command &quot;freq-map&quot;, :offset 8, :ns &quot;streetgraph.core&quot;} {:command &quot;(find @freq-map :28809556)&quot;, :offset 26, :ns &quot;streetgraph.core&quot;} {:command &quot; (for [i (range (count testroads))]\n  (for [nd (nth testroads i)]\n    (let [gotcha (get @freq-map nd)]\n      (if (nil? gotcha)\n        (swap! freq-map assoc nd 1)\n        ))))&quot;, :offset 29} {:command &quot;(def testroads (take 2 roads))&quot;, :offset 30, :ns &quot;streetgraph.core&quot;} {:command &quot;(take 2 roads)&quot;, :offset 14, :ns &quot;streetgraph.core&quot;} {:command &quot; (for [i (range (count testroads))]\n  (for [nd (nth testroads i)]\n    (let [gotcha (get @freq-map nd)]\n      (if (nil? gotcha)\n        (reset! freq-map assoc nd 1)\n        (reset! freq-map assoc nd (inc gotcha))))))&quot;, :offset 215, :ns &quot;streetgraph.core&quot;} {:command &quot;(def testroads (take 5 roads))&quot;, :offset 30, :ns &quot;streetgraph.core&quot;} {:command &quot; (for [i (range (count testroads))]\n  (for [nd (nth testroads i)]\n    (let [gotcha (get @freq-map nd)]\n      (if (nil? gotcha)\n        (swap! freq-map assoc nd 1)\n        (swap! freq-map assoc nd (inc gotcha))))))&quot;, :offset 213, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn node-frequen\n  [roads]\n  (for [i (range (count roads))]\n    (for [nd (nth roads i)]\n      (let [gotcha (get @freq-map nd)]\n        (if (nil? gotcha)\n          (swap! freq-map assoc nd 1)\n          (swap! freq-map assoc nd (inc gotcha)))))))&quot;, :offset 246, :ns &quot;streetgraph.core&quot;} {:command &quot;(reset! freq-map {})&quot;, :offset 20, :ns &quot;streetgraph.core&quot;} {:command &quot;(node-frequen testroads)&quot;, :offset 24, :ns &quot;streetgraph.core&quot;} {:command &quot;@freq-map&quot;, :offset 9, :ns &quot;streetgraph.core&quot;} {:command &quot;(nth ways 0)&quot;, :offset 12, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn get-road-direction\n  [way-tags]\n  (let [oneway-info-in (zip-xml/attr= :k \&quot;oneway\&quot;)]\n    (let [oneway-info\n          (filter some?\n                  (for [tag way-tags]\n                    (if (oneway-info-in tag)\n                      (zip-xml/attr tag :v))))]\n      (if (= oneway-info \&quot;yes\&quot;)\n        :--&gt;\n        (if (= oneway-info \&quot;-1\&quot;)\n          :&lt;--\n          :&lt;--&gt; )))))&quot;, :offset 381, :ns &quot;streetgraph.core&quot;} {:command &quot;(def testways (take 100 ways))&quot;, :offset 30, :ns &quot;streetgraph.core&quot;} {:command &quot;(for [tw testways]\n  (let [way-tags zip-xml/xml-&gt; tw :tag]\n    ((filter some?\n             (for [tag way-tags]\n               (if ((zip-xml/attr= :k \&quot;oneway\&quot;) tag)\n                 (zip-xml/attr tag :v)))))))&quot;, :offset 208, :ns &quot;streetgraph.core&quot;} {:command &quot;(for [tw testways]\n  (let [way-tags zip-xml/xml-&gt; tw :tag]\n    (filter some?\n             (for [tag way-tags]\n               (if ((zip-xml/attr= :k \&quot;oneway\&quot;) tag)\n                 (zip-xml/attr tag :v))))))&quot;, :offset 206, :ns &quot;streetgraph.core&quot;} {:command &quot;(for [tw testways]\n  (let [way-tags (zip-xml/xml-&gt; tw :tag)]\n    (filter some?\n             (for [tag way-tags]\n               (if ((zip-xml/attr= :k \&quot;oneway\&quot;) tag)\n                 (zip-xml/attr tag :v))))))&quot;, :offset 208, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn get-road-direction\n  [way-tags]\n  (let [oneway-info-in (zip-xml/attr= :k \&quot;oneway\&quot;)]\n    (let [oneway-info\n          (filter some?\n                  (for [tag way-tags]\n                    (if (oneway-info-in tag)\n                      (zip-xml/attr tag :v))))]\n      (if (= oneway-info (\&quot;yes\&quot;))\n        :--&gt;\n        (if (= oneway-info (\&quot;-1\&quot;))\n          :&lt;--\n          :&lt;--&gt; )))))&quot;, :offset 385, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn get-road-direction\n  [way-tags]\n  (let [oneway-info-in (zip-xml/attr= :k \&quot;oneway\&quot;)]\n    (let [oneway-info\n          (filter some?\n                  (for [tag way-tags]\n                    (if (oneway-info-in tag)\n                      (zip-xml/attr tag :v))))]\n      (if (= oneway-info '(\&quot;yes\&quot;))\n        :--&gt;\n        (if (= oneway-info '(\&quot;-1\&quot;))\n          :&lt;--\n          :&lt;--&gt; )))))&quot;, :offset 387, :ns &quot;streetgraph.core&quot;} {:command &quot;(for [tw testways] \n  (get-road-direction (zip-xml/xml-&gt; tw :tag)))&quot;, :offset 67, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn get-roads-with-blackjack\n  [ways]\n  (filter some?\n          (for [w ways]\n            (let [tags (zip-xml/xml-&gt; w :tag)\n                  nodes (zip-xml/xml-&gt; w :nd)\n                  highway-info-in (zip-xml/attr= :k \&quot;highway\&quot;)]\n              (if (some (highway-info-in tags))\n                (let [road-entry (atom {})]\n                  (do \n                    (swap! road-entry assoc :nodes\n                                      (for [n nodes]\n                                        (keyword (zip-xml/attr n :ref))))\n                    (swap! road-entry assoc :direction\n                                      (get-road-direction tags))\n                    @road-entry)))))))&quot;, :offset 687, :ns &quot;streetgraph.core&quot;} {:command &quot;(let [road-entry (atom {})]\n  (do\n    (swap! road-entry assoc :nodes\n           \&quot;hello\&quot;)\n    (swap! road-entry assoc :direction\n           \&quot;man\&quot;)\n    @road-entry))&quot;, :offset 163, :ns &quot;streetgraph.core&quot;} {:command &quot;(get-roads testways)&quot;, :offset 20, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn get-roads-with-blackjack\n  [ways]\n  (filter some?\n          (for [w ways]\n            (let [tags (zip-xml/xml-&gt; w :tag)\n                  nodes (zip-xml/xml-&gt; w :nd)\n                  highway-info-in (zip-xml/attr= :k \&quot;highway\&quot;)]\n              (if (some highway-info-in tags)\n                (let [road-entry (atom {})]\n                  (do \n                    (swap! road-entry assoc :nodes\n                                      (for [n nodes]\n                                        (keyword (zip-xml/attr n :ref))))\n                    (swap! road-entry assoc :direction\n                                      (get-road-direction tags))\n                    @road-entry)))))))&quot;, :offset 685, :ns &quot;streetgraph.core&quot;} {:command &quot;(get-roads-with-blackjack testways)&quot;, :offset 35, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads [roads]\n  (let [frequency-map (atom {})]\n    (do \n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (for [node (:nodes road)]\n            (let [gotcha (get @frequency-map nd)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (println @frequency-map))))&quot;, :offset 416, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads [roads]\n  (let [frequency-map (atom {})]\n    (do \n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (for [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (println @frequency-map))))&quot;, :offset 418, :ns &quot;streetgraph.core&quot;} {:command &quot;(def testways (take 20 ways))&quot;, :offset 29, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads [roads]\n  (let [frequency-map (atom {})]\n    (do \n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (println @frequency-map))))&quot;, :offset 420, :ns &quot;streetgraph.core&quot;} {:command &quot;(-&gt; testways\n    get-roads\n    filter-roads)&quot;, :offset 44, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads [roads]\n  (let [frequency-map (atom {})\n        filtered-roads (atom \n                         (apply vector\n                                (for [r roads]\n                                  {:direction (:direction r)\n                                   :nodes (list\n                                            (first (:nodes r))\n                                            (last (:nodes r)))})))]\n    (do \n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (for [node-id @frequency-map]\n        (let [road-list (get @frequency-map node-id)]\n          (if (&gt; (count road-list) 1)\n            (for [road-num road-list]\n              (swap! filtered-roads assoc road-num \n                     (into (nth @filtered-roads road-num) node-id))))))\n      @filtered-roads))) &quot;, :offset 1057, :ns &quot;streetgraph.core&quot;} {:command &quot;(def testways (take 500 ways))&quot;, :offset 30, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads [roads]\n  (let [frequency-map (atom {})\n        filtered-roads (atom \n                         (apply vector\n                                (for [r roads]\n                                  {:direction (:direction r)\n                                   :nodes (list\n                                            (first (:nodes r))\n                                            (last (:nodes r)))})))]\n    (do \n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (doseq [node-id @frequency-map]\n        (let [road-list (get @frequency-map node-id)]\n          (if (&gt; (count road-list) 1)\n            (do (println \&quot;!!\&quot;)\n                (doseq [road-num road-list]\n                  (swap! filtered-roads assoc road-num\n                         (into (nth @filtered-roads road-num) node-id)))))))\n      @filtered-roads))) &quot;, :offset 1104, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads [roads]\n  (let [frequency-map (atom {})\n        filtered-roads (atom \n                         (apply vector\n                                (for [r roads]\n                                  {:direction (:direction r)\n                                   :nodes (list\n                                            (first (:nodes r))\n                                            (last (:nodes r)))})))]\n    (do \n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (doseq [node-id @frequency-map]\n        (let [road-list (get @frequency-map node-id)]\n          (if (&gt; (count road-list) 1)\n            (do (println \&quot;!!\&quot;)\n                (doseq [road-num road-list]\n                  (let [road-entry (nth @filtered-roads road-num)]\n                    (swap! filtered-roads assoc road-num\n                           (assoc road-entry :nodes (into (:nodes ()) '(node-id))))))))))\n      @filtered-roads))) &quot;, :offset 1186, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads [roads]\n  (let [frequency-map (atom {})\n        filtered-roads (atom \n                         (apply vector\n                                (for [r roads]\n                                  {:direction (:direction r)\n                                   :nodes (list\n                                            (first (:nodes r))\n                                            (last (:nodes r)))})))]\n    (do \n      (println @filtered-roads)\n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (println frequency-map)\n      (doseq [node-id @frequency-map]\n        (let [road-list (get @frequency-map node-id)]\n          (if (&gt; (count road-list) 1)\n            (do (println \&quot;!!\&quot;)\n                (doseq [road-num road-list]\n                  (let [road-entry (nth @filtered-roads road-num)]\n                    (swap! filtered-roads assoc road-num\n                           (assoc road-entry :nodes (into (:nodes ()) '(node-id))))))))))\n      @filtered-roads))) &quot;, :offset 1248, :ns &quot;streetgraph.core&quot;} {:command &quot;(def testways (take 25 ways))&quot;, :offset 29, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads [roads]\n  (let [frequency-map (atom {})\n        filtered-roads (atom \n                         (apply vector\n                                (for [r roads]\n                                  {:direction (:direction r)\n                                   :nodes (list\n                                            (first (:nodes r))\n                                            (last (:nodes r)))})))]\n    (do \n      (println @filtered-roads)\n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (println @frequency-map)\n      (doseq [node-id @frequency-map]\n        (let [road-list (get @frequency-map node-id)]\n          (if (&gt; (count road-list) 1)\n            (do (println \&quot;!!\&quot;)\n                (doseq [road-num road-list]\n                  (let [road-entry (nth @filtered-roads road-num)]\n                    (swap! filtered-roads assoc road-num\n                           (assoc road-entry :nodes (into (:nodes ()) '(node-id))))))))))\n      @filtered-roads))) &quot;, :offset 1249, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads [roads]\n  (let [frequency-map (atom {})\n        filtered-roads (atom \n                         (apply vector\n                                (for [r roads]\n                                  {:direction (:direction r)\n                                   :nodes (list\n                                            (first (:nodes r))\n                                            (last (:nodes r)))})))]\n    (do \n      (println @filtered-roads)\n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (println @frequency-map)\n      (doseq [node-entry @frequency-map]\n        (let [road-list (val node-entry)]\n          (if (&gt; (count road-list) 1)\n            (do (println \&quot;!!\&quot;)\n                (doseq [road-num road-list]\n                  (let [road-entry (nth @filtered-roads road-num)]\n                    (swap! filtered-roads assoc road-num\n                           (assoc road-entry :nodes (into (:nodes road-entry) '((key node-entry)))))))))))\n      @filtered-roads))) &quot;, :offset 1257, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads [roads]\n  (let [frequency-map (atom {})\n        filtered-roads (atom \n                         (apply vector\n                                (for [r roads]\n                                  {:direction (:direction r)\n                                   :nodes (list\n                                            (first (:nodes r))\n                                            (last (:nodes r)))})))]\n    (do \n      (println @filtered-roads)\n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (println @frequency-map)\n      (doseq [node-entry @frequency-map]\n        (let [road-list (val node-entry)]\n          (if (&gt; (count road-list) 1)\n            (do (println \&quot;!!\&quot;)\n                (doseq [road-num road-list]\n                  (let [road-entry (nth @filtered-roads road-num)]\n                    (swap! filtered-roads assoc road-num\n                           (assoc road-entry :nodes (into (:nodes road-entry) (key node-entry))))))))))\n      @filtered-roads))) &quot;, :offset 1254, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads [roads]\n  (let [frequency-map (atom {})\n        filtered-roads (atom \n                         (apply vector\n                                (for [r roads]\n                                  {:direction (:direction r)\n                                   :nodes (list\n                                            (first (:nodes r))\n                                            (last (:nodes r)))})))]\n    (do \n      (println @filtered-roads)\n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (println @frequency-map)\n      (doseq [node-entry @frequency-map]\n        (let [road-list (val node-entry)]\n          (if (&gt; (count road-list) 1)\n            (do (println \&quot;!!\&quot;)\n                (doseq [road-num road-list]\n                  (let [road-entry (nth @filtered-roads road-num)]\n                    (swap! filtered-roads assoc road-num\n                           (assoc road-entry :nodes (into (:nodes road-entry) '(key node-entry))))))))))\n      @filtered-roads))) &quot;, :offset 1255, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads [roads]\n  (let [frequency-map (atom {})\n        filtered-roads (atom \n                         (apply vector\n                                (for [r roads]\n                                  {:direction (:direction r)\n                                   :nodes (list\n                                            (first (:nodes r))\n                                            (last (:nodes r)))})))]\n    (do \n      (println @filtered-roads)\n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (println @frequency-map)\n      (doseq [node-entry @frequency-map]\n        (let [road-list (val node-entry)]\n          (if (&gt; (count road-list) 1)\n            (do (println \&quot;!!\&quot;)\n                (doseq [road-num road-list]\n                  (let [road-entry (nth @filtered-roads road-num)\n                        node-id (key node-entry)]\n                    (swap! filtered-roads assoc road-num\n                           (assoc road-entry :nodes (into (:nodes road-entry) '(node-id))))))))))\n      @filtered-roads))) &quot;, :offset 1297, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads [roads]\n  (let [frequency-map (atom {})\n        filtered-roads (atom \n                         (apply vector\n                                (for [r roads]\n                                  {:direction (:direction r)\n                                   :nodes (list\n                                            (first (:nodes r))\n                                            (last (:nodes r)))})))]\n    (do \n      (println @filtered-roads)\n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (println @frequency-map)\n      (doseq [node-entry @frequency-map]\n        (let [road-list (val node-entry)]\n          (if (&gt; (count road-list) 1)\n            (do (println \&quot;!!\&quot;)\n                (doseq [road-num road-list]\n                  (let [road-entry (nth @filtered-roads road-num)]\n                    (swap! filtered-roads assoc road-num\n                           (assoc road-entry :nodes (conj (:nodes road-entry) (key node-entry))))))))))\n      @filtered-roads))) &quot;, :offset 1254, :ns &quot;streetgraph.core&quot;} {:command &quot;(def testways (take 200 ways))&quot;, :offset 30, :ns &quot;streetgraph.core&quot;} {:command &quot;(-&gt; testways\n    get-roads-with-blackjack\n    filter-roads)&quot;, :offset 59, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads-v2 [roads]\n  (let [frequency-map (atom {})\n        filtered-roads (atom \n                         (apply vector\n                                (for [r roads]\n                                  {:direction (:direction r)\n                                   :nodes (vector\n                                            (first (:nodes r))\n                                            (last (:nodes r)))})))]\n    (do \n      (println @filtered-roads)\n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (println @frequency-map)\n      (doseq [node-entry @frequency-map]\n        (let [road-list (val node-entry)\n              node-id (key node-entry)]\n          (if (&gt; (count road-list) 1)\n            (doseq [road-num road-list]\n              (let [road-entry (nth @filtered-roads road-num)]\n                (if (not (some #{node-id} (take 2 road-list))\n                         (swap! filtered-roads assoc road-num\n                                (assoc road-entry :nodes (conj (:nodes road-entry) (key node-entry)))))))))))\n      @filtered-roads))) &quot;, :offset 1332, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads-v2 [roads]\n  (let [frequency-map (atom {})\n        filtered-roads (atom \n                         (apply vector\n                                (for [r roads]\n                                  {:direction (:direction r)\n                                   :nodes (vector\n                                            (first (:nodes r))\n                                            (last (:nodes r)))})))]\n    (do \n      (println @filtered-roads)\n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (println @frequency-map)\n      (doseq [node-entry @frequency-map]\n        (let [road-list (val node-entry)\n              node-id (key node-entry)]\n          (if (&gt; (count road-list) 1)\n            (doseq [road-num road-list]\n              (let [road-entry (nth @filtered-roads road-num)]\n                (if (not (some #{node-id} (take 2 road-list)))\n                         (swap! filtered-roads assoc road-num\n                                (assoc road-entry :nodes (conj (:nodes road-entry) (key node-entry)))))))))))\n      @filtered-roads)) &quot;, :offset 1331, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads-v2 [roads]\n  (let [frequency-map (atom {})\n        filtered-roads (atom \n                         (apply vector\n                                (for [r roads]\n                                  {:direction (:direction r)\n                                   :nodes (vector\n                                            (first (:nodes r))\n                                            (last (:nodes r)))})))]\n    (do \n      (println @filtered-roads)\n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (println @frequency-map)\n      (doseq [node-entry @frequency-map]\n        (let [road-list (val node-entry)\n              node-id (key node-entry)]\n          (if (&gt; (count road-list) 1)\n            (doseq [road-id road-list]\n              (let [road-entry (nth @filtered-roads road-id)]\n                (if (not (some #{node-id} (take 2 (:nodes road-entry))))\n                         (swap! filtered-roads assoc road-id\n                                (assoc road-entry :nodes \n                                                  (conj (:nodes road-entry) (key node-entry)))))))))))\n      @filtered-roads)) &quot;, :offset 1390, :ns &quot;streetgraph.core&quot;} {:command &quot;(-&gt; testways\n    get-roads-with-blackjack\n    filter-roads-v2)&quot;, :offset 62, :ns &quot;streetgraph.core&quot;} {:command &quot;(require [dali.io :as dali-io])&quot;, :offset 31, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn visualise \n  [roads]\n  (let [nodes-info (zip-xml/xml-&gt; root :node)])\n  (doseq [r roads]\n    (let [nodes (:nodes r)]\n      ())))&quot;, :offset 133, :ns &quot;streetgraph.core&quot;} {:command &quot;(def nodes-info (into {}\n                      (for [m (zip-xml/xml-&gt; root :node)]\n                        [(keyword (zip-xml/attr m :id))\n                         {:lat (zip-xml/attr m :lat),\n                          :lon (zip-xml/attr m :lon),\n                          :ver (zip-xml/attr m :version)}\n                         ]))) \n&quot;, :offset 335, :ns &quot;streetgraph.core&quot;} {:command &quot;(take 10 nodes-info)&quot;, :offset 20, :ns &quot;streetgraph.core&quot;} {:command &quot;(def nodes-info (into {}\n                      )) \n&quot;, :offset 22} {:command &quot;(defn prepare-image \n  [roads]\n  (let [nodes-coords (atom {})]\n    (do\n      (for [n (zip-xml/xml-&gt; root :node)]\n        (swap! nodes-coords assoc (keyword (zip-xml/attr n :id))\n               {:lat (zip-xml/attr n :lat),\n                :lon (zip-xml/attr n :lon)}))\n      [:dali/page\n       (doseq [road roads]\n         (let [road-nodes (:nodes road)]\n           (doseq [node road-nodes]\n             [:circle\n              {:stroke-paint :black :stroke-width 1 :fill :orange}\n              [(read-string (:lat (node nodes-coords)))\n               (read-string (:lon (node nodes-coords)))] 3])))])))&quot;, :offset 601, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn filter-roads-hah\n  \&quot;Removes all nodes, excepting first, last nodes and crossings\&quot;\n  [roads]\n  (let [frequency-map (atom {})\n        filtered-roads (atom\n                         (apply vector\n                                (for [r roads]\n                                  {:direction (:direction r)\n                                   :nodes (vector\n                                            (first (:nodes r))\n                                            (last (:nodes r)))})))]\n    (do\n      (doseq [i (range (count roads))]\n        (let [road (nth roads i)]\n          (doseq [node (:nodes road)]\n            (let [gotcha (get @frequency-map node)]\n              (if (nil? gotcha)\n                (swap! frequency-map assoc node [i])\n                (swap! frequency-map assoc node (conj gotcha i)))))))\n      (doseq [node-entry @frequency-map]\n        (let [road-list (val node-entry)\n              node-id (key node-entry)]\n          (if (&gt; (count road-list) 1)\n            (doseq [road-id road-list]\n              (let [road-entry (nth @filtered-roads road-id)]\n                (if (not (some #{node-id} (take 2 (:nodes road-entry))))\n                  (swap! filtered-roads assoc road-id\n                         (assoc road-entry :nodes\n                                           (conj (:nodes road-entry) (key node-entry)))))))))))\n    @filtered-roads))&quot;, :offset 1368, :ns &quot;streetgraph.core&quot;} {:command &quot;(def testways (-&gt; ways\n                  get-roads\n                  filter-roads))&quot;, :offset 83, :ns &quot;streetgraph.core&quot;} {:command &quot;(def testt (take 10 testways))&quot;, :offset 30, :ns &quot;streetgraph.core&quot;} {:command &quot;(def testroads testt)&quot;, :offset 21, :ns &quot;streetgraph.core&quot;} {:command &quot;(def testroads (-&gt; (take 10 ways)\n                  get-roads\n                  filter-roads-hah))&quot;, :offset 98, :ns &quot;streetgraph.core&quot;} {:command &quot;(prepare-image testroads)&quot;, :offset 25, :ns &quot;streetgraph.core&quot;} {:command &quot;(count testroads)&quot;, :offset 17, :ns &quot;streetgraph.core&quot;} {:command &quot;(count ways)&quot;, :offset 12, :ns &quot;streetgraph.core&quot;} {:command &quot;(-&gt; (take 10 ways)\n    get-roads)&quot;, :offset 33, :ns &quot;streetgraph.core&quot;} {:command &quot;(def testways (take 10 ways))&quot;, :offset 29, :ns &quot;streetgraph.core&quot;} {:command &quot;(count testways)&quot;, :offset 16, :ns &quot;streetgraph.core&quot;} {:command &quot;(def testways (take 50 ways))&quot;, :offset 29, :ns &quot;streetgraph.core&quot;} {:command &quot;(-&gt; testways\n    get-roads)&quot;, :offset 27, :ns &quot;streetgraph.core&quot;} {:command &quot;(-&gt; testways\n    get-roads\n    filter-roads-hah\n    prepare-image)&quot;, :offset 66, :ns &quot;streetgraph.core&quot;} {:command &quot;(def coords (atom {}))\n&quot;, :offset 22, :ns &quot;streetgraph.core&quot;} {:command &quot;(take 50 nodes)&quot;, :offset 15, :ns &quot;streetgraph.core&quot;} {:command &quot;(def testnodes (take 10 nodes))&quot;, :offset 31, :ns &quot;streetgraph.core&quot;} {:command &quot;(for [n testnodes]\n  (swap! coords assoc (keyword (zip-xml/attr n :id))\n         {:lat (zip-xml/attr n :lat),\n          :lon (zip-xml/attr n :lon)}))&quot;, :offset 149, :ns &quot;streetgraph.core&quot;} {:command &quot;@coords&quot;, :offset 7, :ns &quot;streetgraph.core&quot;} {:command &quot;testroads&quot;, :offset 9, :ns &quot;streetgraph.core&quot;} {:command &quot;testways&quot;, :offset 8, :ns &quot;streetgraph.core&quot;} {:command &quot;(map\n  (fn [dot]\n    [:circle {:fill :grey} dot 1])\n  ([1 2] [3 4] [5 6]))&quot;, :offset 74, :ns &quot;streetgraph.core&quot;} {:command &quot;(map\n  (fn [dot]\n    [:circle {:fill :grey} dot 1])\n  ('[1 2] '[3 4] '[5 6]))&quot;, :offset 77, :ns &quot;streetgraph.core&quot;} {:command &quot;(defn put-in-vec [sth] [:here :lays sth])&quot;, :offset 41, :ns &quot;streetgraph.core&quot;} {:command &quot;(put-in-vec 4)&quot;, :offset 14, :ns &quot;streetgraph.core&quot;} {:command &quot;(put-in-vec [2 3])&quot;, :offset 18, :ns &quot;streetgraph.core&quot;} {:command &quot;(map\n  (fn [dot]\n    [:circle {:fill :grey} dot 1])\n  (4 5 6))&quot;, :offset 62, :ns &quot;streetgraph.core&quot;} {:command &quot;(map\n  (fn [dot]\n    [:circle {:fill :grey} dot 1])\n  '([1 2] [3 4] [5 6]))&quot;, :offset 75, :ns &quot;streetgraph.core&quot;} {:command &quot;(def dots ([1 2] [3 4]))&quot;, :offset 24, :ns &quot;streetgraph.core&quot;} {:command &quot;(def dots '([1 2] [3 4]))&quot;, :offset 25, :ns &quot;streetgraph.core&quot;} {:command &quot;(apply conj [] (1 2 3))&quot;, :offset 23, :ns &quot;streetgraph.core&quot;} {:command &quot;(apply conj [] '(1 2 3))&quot;, :offset 24, :ns &quot;streetgraph.core&quot;} {:command &quot;(apply conj [] dots)&quot;, :offset 20, :ns &quot;streetgraph.core&quot;} {:command &quot;(def roads (-&gt; (take 30 ways)\n               get-roads\n               filter-roads))&quot;, :offset 84, :ns &quot;streetgraph.core&quot;} {:command &quot;(to-csv roads)&quot;, :offset 14, :ns &quot;streetgraph.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure Application.streetgraph.core">
    <configuration default="true" type="Applet" factoryName="Applet">
      <option name="HTML_USED" value="false" />
      <option name="WIDTH" value="400" />
      <option name="HEIGHT" value="300" />
      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
      <module />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
    </configuration>
    <configuration name="streetgraphREPL" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="streetgraph" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <method>
        <option name="Synchronize Leiningen" enabled="true" />
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="streetgraph" type="ClojureScriptRunConfiguration" factoryName="Clojure Script">
      <module name="streetgraph" />
      <setting name="path" value="C:\Users\Anna Kruchinina\.lein\self-installs\streetgraph\src\streetgraph\core.clj" />
      <setting name="namespace" value="" />
      <setting name="useLein" value="false" />
      <setting name="profiles" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$" />
    </configuration>
    <configuration name="streetgraph.core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="streetgraph" />
      <setting name="path" value="" />
      <setting name="namespace" value="streetgraph.core" />
      <setting name="useLein" value="false" />
      <setting name="profiles" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$" />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="TEST_OBJECT" value="class" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <envs />
      <patterns />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="TestNG" factoryName="TestNG">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="SUITE_NAME" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="GROUP_NAME" />
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
      <option name="OUTPUT_DIRECTORY" />
      <option name="ANNOTATION_TYPE" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <option name="USE_DEFAULT_REPORTERS" value="false" />
      <option name="PROPERTIES_FILE" />
      <envs />
      <properties />
      <listeners />
    </configuration>
    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType" factoryName="Plugin">
      <module name="" />
      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
      <option name="PROGRAM_PARAMETERS" />
      <predefined_log_file id="idea.log" enabled="true" />
    </configuration>
    <list size="3">
      <item index="0" class="java.lang.String" itemvalue="Clojure Application.streetgraph" />
      <item index="1" class="java.lang.String" itemvalue="Clojure REPL.streetgraphREPL" />
      <item index="2" class="java.lang.String" itemvalue="Clojure Application.streetgraph.core" />
    </list>
    <recent_temporary>
      <list size="1">
        <item index="0" class="java.lang.String" itemvalue="Clojure Application.streetgraph.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="ShelveChangesManager" show_recycled="false">
    <option name="remove_strategy" value="false" />
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="4520dd39-e0db-469e-a8b7-295ad3446b37" name="Default" comment="" />
      <created>1520715986554</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1520715986554</updated>
    </task>
    <task id="LOCAL-00001" summary="Removed osm file, as it was too large">
      <created>1521147919908</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1521147919921</updated>
    </task>
    <task id="LOCAL-00002" summary="Removed osm file, as it was too large [att 2]">
      <created>1521148105779</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1521148105779</updated>
    </task>
    <option name="localTasksCounter" value="3" />
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="-9" y="-9" width="1938" height="1048" extended-state="6" />
    <layout>
      <window_info id="Palette" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Palette&#9;" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Image Layers" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Analysis" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="true" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.32893288" sideWeight="0.5" order="7" side_tool="true" content_ui="tabs" />
      <window_info id="Maven Projects" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="REPL" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.2671875" sideWeight="0.5" order="3" side_tool="true" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.22332233" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Leiningen" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Tool" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.14322917" sideWeight="0.5" order="0" side_tool="false" content_ui="combo" />
      <window_info id="Learn" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="UI Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Theme Preview" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.39933994" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="true" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Messages" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Documentation" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="FLOATING" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" x="91" y="91" width="1738" height="848" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
    </layout>
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="VcsManagerConfiguration">
    <ignored-roots>
      <path value="$PROJECT_DIR$" />
    </ignored-roots>
    <MESSAGE value="Removed osm file, as it was too large" />
    <MESSAGE value="Removed osm file, as it was too large [att 2]" />
    <option name="LAST_COMMIT_MESSAGE" value="Removed osm file, as it was too large [att 2]" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints-dialog>
        <breakpoints-dialog />
      </breakpoints-dialog>
      <option name="time" value="9" />
    </breakpoint-manager>
    <watches-manager />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/streetgraph/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="2268">
          <caret line="108" column="54" lean-forward="false" selection-start-line="108" selection-start-column="54" selection-end-line="108" selection-end-column="54" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="SPLIT">
          <first_editor relative-caret-position="21">
            <caret line="1" column="45" lean-forward="false" selection-start-line="1" selection-start-column="45" selection-end-line="1" selection-end-column="45" />
            <folding />
          </first_editor>
          <second_editor>
            <js_state />
          </second_editor>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="189">
          <caret line="9" column="47" lean-forward="false" selection-start-line="9" selection-start-column="47" selection-end-line="9" selection-end-column="47" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="252">
          <caret line="12" column="0" lean-forward="false" selection-start-line="12" selection-start-column="0" selection-end-line="12" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/streetgraph/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="168">
          <caret line="8" column="31" lean-forward="false" selection-start-line="8" selection-start-column="31" selection-end-line="8" selection-end-column="31" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="SPLIT">
          <first_editor relative-caret-position="0">
            <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
            <folding />
          </first_editor>
          <second_editor>
            <js_state />
          </second_editor>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/streetgraph/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="189">
          <caret line="9" column="47" lean-forward="false" selection-start-line="9" selection-start-column="47" selection-end-line="9" selection-end-column="47" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="SPLIT">
          <first_editor relative-caret-position="21">
            <caret line="1" column="45" lean-forward="false" selection-start-line="1" selection-start-column="45" selection-end-line="1" selection-end-column="45" />
            <folding />
          </first_editor>
          <second_editor>
            <js_state />
          </second_editor>
        </state>
      </provider>
      <provider editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/streetgraph/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="108" column="54" lean-forward="false" selection-start-line="108" selection-start-column="54" selection-end-line="108" selection-end-column="54" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.idea/vcs.xml">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="252">
          <caret line="12" column="0" lean-forward="false" selection-start-line="12" selection-start-column="0" selection-end-line="12" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>8.0_162</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>streetgraph</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Leiningen: clojure-complete:0.2.4</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>